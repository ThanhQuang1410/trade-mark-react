{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","linkMainImage","setLinkMainImage","linkTradeImage","setLinkTradeImage","generateImage","value","split","console","log","className","noValidate","autoComplete","TextField","color","size","id","label","onChange","event","target","Button","onClick","node","document","getElementById","htmlToImage","toPng","then","dataUrl","img","Image","src","appendChild","download","catch","error","variant","style","position","alt","width","height","top","maxScale","zoomButtons","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2UAuEeA,MAhEf,WAAgB,IAAD,EAC8BC,mBAAS,IADvC,mBACJC,EADI,KACUC,EADV,OAEgCF,mBAAS,IAFzC,mBAEJG,EAFI,KAEWC,EAFX,KAILC,EAAgB,SAACC,GAInB,OAHAA,EAAQA,EAAMC,MAAM,KACpBC,QAAQC,IAAIH,GAEL,8CADEA,EAAM,GAAGC,MAAM,KAAK,IA4BjC,OACI,yBAAKG,UAAU,iBACX,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,YACZ,0BAAMC,YAAU,EAACC,aAAa,OAC1B,kBAACC,EAAA,EAAD,CAAWH,UAAW,eAAgBI,MAAM,YAAYC,KAAM,QAASC,GAAG,iBAAiBC,MAAM,yBAAiBC,SA7BxG,SAACC,GAC3B,IAAIb,EAAQa,EAAMC,OAAOd,MACzBA,EAAQD,EAAcC,GACtBE,QAAQC,IAAIH,GACZJ,EAAiBI,MA0BD,kBAACO,EAAA,EAAD,CAAWH,UAAW,eAAgBI,MAAM,YAAYC,KAAM,QAASC,GAAG,iBAAiBC,MAAM,2BAAsBC,SAxB5G,SAACC,GAC5B,IAAIb,EAAQa,EAAMC,OAAOd,MACzBA,EAAQD,EAAcC,GACtBF,EAAkBE,MAsBF,kBAACe,EAAA,EAAD,CAAQX,UAAW,SAAUY,QApBrB,WACxB,IAAIC,EAAOC,SAASC,eAAe,sBACnCC,IAAYC,MAAMJ,GACbK,MAAK,SAAUC,GACZ,IAAIC,EAAM,IAAIC,MACdD,EAAIE,IAAMH,EACVL,SAASC,eAAe,UAAUQ,YAAYH,GAC9CI,IAASL,EAAS,kBAErBM,OAAM,SAAUC,GACb5B,QAAQ4B,MAAM,8BAA+BA,OAUsBC,QAAQ,WAAWvB,MAAM,aAApF,mBAKR,yBAAKJ,UAAW,gBACZ,yBAAKA,UAAW,WAAYM,GAAI,qBAAsBsB,MAAO,CAACC,SAAU,aACnEtC,GAAiB,yBAAKuC,IAAK,YAAa9B,UAAW,qBAAsBsB,IAAK/B,IAC/E,yBAAKqC,MAAO,CAAEG,MAAO,OAAQC,OAAQ,OAASH,SAAU,WAAaI,IAAK,IACtE,kBAAC,IAAD,CAAcC,SAAU,GAAKC,aAAa,EAAON,SAAU,UACtDpC,EAAiB,yBAAKqC,IAAI,aAAaR,IAAK7B,IAAqB,iCAI9E,yBAAKO,UAAW,WAAYM,GAAI,eCnDhC8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMuB,c","file":"static/js/main.36bafd83.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PinchZoomPan from \"react-responsive-pinch-zoom-pan\";\nimport {Button,TextField} from '@material-ui/core'\nimport htmlToImage from 'html-to-image';\nimport download from 'downloadjs'\nfunction App() {\n    const [linkMainImage,setLinkMainImage] = useState(\"\");\n    const [linkTradeImage,setLinkTradeImage] = useState(\"\");\n\n    const generateImage = (value) => {\n        value = value.split(\"/\");\n        console.log(value)\n        let id = value[3].split(\"=\")[1];\n        return \"https://drive.google.com/uc?export=view&id=\" + id;\n    };\n\n    const handleChangeMainImage = (event) => {\n        let value = event.target.value;\n        value = generateImage(value);\n        console.log(value)\n        setLinkMainImage(value)\n    };\n    const handleChangeTradeImage = (event) => {\n        let value = event.target.value;\n        value = generateImage(value);\n        setLinkTradeImage(value)\n    };\n    const handleGenerateImage = () => {\n        let node = document.getElementById(\"image-after-render\");\n        htmlToImage.toPng(node)\n            .then(function (dataUrl) {\n                let img = new Image();\n                img.src = dataUrl;\n                document.getElementById(\"result\").appendChild(img);\n                download(dataUrl, 'my-node.png');\n            })\n            .catch(function (error) {\n                console.error('oops, something went wrong!', error);\n            });\n    };\n    return (\n        <div className=\"App container\">\n            <div className={'row'}>\n                <div className={'col-md-4'}>\n                    <form noValidate autoComplete=\"off\">\n                        <TextField className={'col-12 mt-4 '} color=\"secondary\" size={'small'} id=\"standard-basic\" label=\"Link ảnh chính\" onChange={handleChangeMainImage}/>\n                        <TextField className={'col-12 mt-4 '} color=\"secondary\" size={'small'} id=\"standard-basic\" label=\"Link ảnh trade mark\" onChange={handleChangeTradeImage}/>\n                        <Button className={' mt-4 '} onClick={handleGenerateImage} variant=\"outlined\" color=\"secondary\">\n                            Sinh ảnh\n                        </Button>\n                    </form>\n                </div>\n                <div className={'col-md-8 row'}>\n                    <div className={'col-md-6'} id={'image-after-render'} style={{position: 'relative'}}>\n                        {linkMainImage && <img alt={'anh-chinh'} className={'img-fluid img-main'} src={linkMainImage}/>}\n                        <div style={{ width: '100%', height: '100%' , position: 'absolute' , top: 0 }}>\n                            <PinchZoomPan maxScale={0.2} zoomButtons={false} position={'center'}>\n                                {linkTradeImage ? <img alt='Test Image' src={linkTradeImage} /> : <div/>}\n                            </PinchZoomPan>\n                        </div>\n                    </div>\n                    <div className={'col-md-6'} id={'result'}>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}