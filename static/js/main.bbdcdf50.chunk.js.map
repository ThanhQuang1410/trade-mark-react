{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","setLinkTradeImage","imageScale","setImageScale","imageRotation","setImageRotation","mainImageCanvas","setMainImageCanvas","setTradeMarkImageCanvas","useEffect","mainCanvas","fabric","Canvas","tradeMark","document","getElementById","onchange","e","reader","FileReader","onload","event","console","log","imgObj","Image","src","target","result","image","add","readAsDataURL","file","className","noValidate","autoComplete","style","display","accept","id","type","htmlFor","Button","variant","color","startIcon","component","onChange","URL","createObjectURL","files","Typography","gutterBottom","Slider","value","newValue","aria-labelledby","max","min","onClick","node","domtoimage","toPng","then","dataUrl","img","appendChild","download","catch","error","position","overflow","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bbdcdf50.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button,Slider,Typography} from '@material-ui/core'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport domtoimage from 'dom-to-image';\nimport download from 'downloadjs'\nimport {fabric} from 'fabric'\nfunction App() {\n    const [linkMainImage,setLinkMainImage] = useState(\"\");\n    const [linkTradeImage,setLinkTradeImage] = useState(\"\");\n    const [imageScale,setImageScale] = useState(1);\n    const [imageRotation,setImageRotation] = useState(0);\n    const [mainImageCanvas,setMainImageCanvas] = useState(null);\n    const [tradeMarkImageCanvas,setTradeMarkImageCanvas] = useState(null);\n\n    useEffect(() => {\n        // code to run on component mount\n        let mainCanvas = new fabric.Canvas(\"main-image\");\n        setMainImageCanvas(mainCanvas);\n\n        let tradeMark = new fabric.Canvas(\"C\");\n        setTradeMarkImageCanvas(tradeMark)\n\n        document.getElementById('contained-button-file').onchange = function handleImage(e) {\n            var reader = new FileReader();\n            reader.onload = function (event) { console.log('fdsf');\n                var imgObj = new Image();\n                imgObj.src = event.target.result;\n                imgObj.onload = function () {\n                    // start fabricJS stuff\n\n                    var image = new fabric.Image(imgObj);\n                    //image.scale(getRandomNum(0.1, 0.25)).setCoords();\n                    mainImageCanvas.add(image);\n\n                    // end fabricJS stuff\n                }\n\n            }\n            reader.readAsDataURL(e.target.file[0]);\n        }\n    }, []);\n\n    const handleChangeTradeImage = (event) => {\n        setLinkTradeImage(URL.createObjectURL(event.target.files[0]))\n    };\n    const handleGenerateImage = () => {\n        let node = document.getElementById(\"image-after-render\");\n        domtoimage.toPng(node)\n            .then(function (dataUrl) {\n                var img = new Image();\n                img.src = dataUrl;\n                document.getElementById(\"result\").appendChild(img);\n                download(dataUrl, 'trade-mark.png');\n        })\n        .catch(function (error) {\n            console.error('oops, something went wrong!', error);\n        });\n    };\n    const handleChangeScale = (event, newValue) => {\n        setImageScale(newValue/100)\n    };\n    const handleChangeRation = (event, newValue) => {\n        setImageRotation(newValue)\n    };\n\n    return (\n        <div className=\"App container\">\n            <div className={'row'}>\n                <div className={'col-md-4'}>\n                    <form noValidate autoComplete=\"off\">\n                        <input\n                            style={{display: 'none'}}\n                            accept=\"image/*\"\n                            id=\"contained-button-file\"\n                            type=\"file\"\n                        />\n                        <label\n                            className={'col-12 mt-4'}\n                            htmlFor=\"contained-button-file\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                startIcon={<CloudUploadIcon />}\n                                component=\"span\"\n                            >\n                                Ảnh chính\n                            </Button>\n                        </label>\n                        <input\n                            style={{display: 'none'}}\n                            accept=\"image/*\"\n                            id=\"contained-button-trademark\"\n                            type=\"file\"\n                            onChange={handleChangeTradeImage}\n                        />\n                        <label\n                            className={'col-12 mt-4'}\n                            htmlFor=\"contained-button-trademark\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                startIcon={<CloudUploadIcon />}\n                                component=\"span\"\n                            >\n                                Ảnh trade mark\n                            </Button>\n                        </label>\n                        <Typography\n                            className={'col-12 mt-4'}\n                            id=\"continuous-slider\"\n                            gutterBottom>\n                            Kích thước ảnh Trade mark\n                        </Typography>\n                        <Slider value={imageScale*100} color={'secondary'} onChange={handleChangeScale} aria-labelledby=\"continuous-slider\" />\n                        <Typography\n                            className={'col-12 mt-4'}\n                            id=\"continuous-slider\"\n                            gutterBottom>\n                            Xoay ảnh Trade mark\n                        </Typography>\n                        <Slider max={360} min={0} value={imageRotation} color={'secondary'} onChange={handleChangeRation} aria-labelledby=\"continuous-slider\" />\n                        <Button className={' mt-4 '} onClick={handleGenerateImage} variant=\"outlined\" color=\"secondary\">\n                            Sinh ảnh\n                        </Button>\n                    </form>\n                </div>\n                <div className={'col-md-8 row mt-5 align-items-center justify-content-center'}>\n                    <div className={'col-md-6'} id={'image-after-render'} style={{position: 'relative', overflow: 'hidden'}}>\n                        <canvas\n                            id=\"main-image\" width=\"600px\" height=\"600px\"\n                        />\n                        <div className=\"c-container\">\n                            <canvas id=\"C\" width=\"600\" height=\"600\"/>\n                        </div>\n                    </div>\n                    <div className={'col-md-6'} id={'result'}>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}