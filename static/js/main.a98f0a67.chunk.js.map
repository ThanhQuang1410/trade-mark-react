{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","linkMainImage","setLinkMainImage","linkTradeImage","setLinkTradeImage","imageScale","setImageScale","imageRotation","setImageRotation","dimensions","setDimensions","useEffect","elmnt","pos1","pos2","pos3","pos4","elementDrag","e","window","event","preventDefault","clientX","clientY","style","top","offsetTop","left","offsetLeft","closeDragElement","document","onmouseup","onmousemove","onmousedown","dragElement","getElementById","className","noValidate","autoComplete","display","accept","id","type","onChange","URL","createObjectURL","target","files","htmlFor","Button","variant","color","startIcon","component","Typography","gutterBottom","Slider","value","newValue","aria-labelledby","max","min","onClick","node","domtoimage","toPng","width","height","then","dataUrl","img","Image","src","appendChild","download","catch","error","console","position","overflow","onLoad","offsetHeight","offsetWidth","alt","transform","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a98f0a67.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button,Slider,Typography} from '@material-ui/core'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport domtoimage from 'dom-to-image';\nimport download from 'downloadjs'\nfunction App() {\n    const [linkMainImage,setLinkMainImage] = useState(\"\");\n    const [linkTradeImage,setLinkTradeImage] = useState(\"\");\n    const [imageScale,setImageScale] = useState(1);\n    const [imageRotation,setImageRotation] = useState(0);\n    const [dimensions,setDimensions] = useState(null);\n    useEffect(() => {\n        dragElement(document.getElementById(\"drag-image\"));\n\n        function dragElement(elmnt) {\n            var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n            // otherwise, move the DIV from anywhere inside the DIV:\n            elmnt.onmousedown = dragMouseDown;\n\n            function dragMouseDown(e) {\n                e = e || window.event;\n                e.preventDefault();\n                // get the mouse cursor position at startup:\n                pos3 = e.clientX;\n                pos4 = e.clientY;\n                document.onmouseup = closeDragElement;\n                // call a function whenever the cursor moves:\n                document.onmousemove = elementDrag;\n            }\n\n            function elementDrag(e) {\n                e = e || window.event;\n                e.preventDefault();\n                // calculate the new cursor position:\n                pos1 = pos3 - e.clientX;\n                pos2 = pos4 - e.clientY;\n                pos3 = e.clientX;\n                pos4 = e.clientY;\n                // set the element's new position:\n                elmnt.style.top = (elmnt.offsetTop - pos2) + \"px\";\n                elmnt.style.left = (elmnt.offsetLeft - pos1) + \"px\";\n            }\n\n            function closeDragElement() {\n                // stop moving when mouse button is released:\n                document.onmouseup = null;\n                document.onmousemove = null;\n                return false\n            }\n        }\n    });\n\n    const handleChangeMainImage = (event) => {\n        setLinkMainImage(URL.createObjectURL(event.target.files[0]))\n    };\n    const handleChangeTradeImage = (event) => {\n        setLinkTradeImage(URL.createObjectURL(event.target.files[0]))\n    };\n    const handleGenerateImage = () => {\n        let node = document.getElementById(\"image-after-render\");\n        domtoimage.toPng(node,{width: dimensions.width,height: dimensions.height})\n            .then(function (dataUrl) {\n                var img = new Image();\n                img.src = dataUrl;\n                document.getElementById(\"result\").appendChild(img);\n                download(dataUrl, 'trade-mark.png');\n        })\n        .catch(function (error) {\n            console.error('oops, something went wrong!', error);\n        });\n    };\n    const handleChangeScale = (event, newValue) => {\n        setImageScale(newValue/100)\n    };\n    const handleChangeRation = (event, newValue) => {\n        setImageRotation(newValue)\n    };\n    const onImgLoad = ({target:img}) => {\n        setDimensions({height:img.offsetHeight*5, width:img.offsetWidth*5});\n    };\n    return (\n        <div className=\"App container\">\n            <div className={'row'}>\n                <div className={'col-md-4'}>\n                    <form noValidate autoComplete=\"off\">\n                        <input\n                            style={{display: 'none'}}\n                            accept=\"image/*\"\n                            id=\"contained-button-file\"\n                            type=\"file\"\n                            onChange={handleChangeMainImage}\n                        />\n                        <label\n                            className={'col-12 mt-4'}\n                            htmlFor=\"contained-button-file\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                startIcon={<CloudUploadIcon />}\n                                component=\"span\"\n                            >\n                                Ảnh chính\n                            </Button>\n                        </label>\n                        <input\n                            style={{display: 'none'}}\n                            accept=\"image/*\"\n                            id=\"contained-button-trademark\"\n                            type=\"file\"\n                            onChange={handleChangeTradeImage}\n                        />\n                        <label\n                            className={'col-12 mt-4'}\n                            htmlFor=\"contained-button-trademark\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                startIcon={<CloudUploadIcon />}\n                                component=\"span\"\n                            >\n                                Ảnh trade mark\n                            </Button>\n                        </label>\n                        <Typography\n                            className={'col-12 mt-4'}\n                            id=\"continuous-slider\"\n                            gutterBottom>\n                            Kích thước ảnh Trade mark\n                        </Typography>\n                        <Slider value={imageScale*100} color={'secondary'} onChange={handleChangeScale} aria-labelledby=\"continuous-slider\" />\n                        <Typography\n                            className={'col-12 mt-4'}\n                            id=\"continuous-slider\"\n                            gutterBottom>\n                            Xoay ảnh Trade mark\n                        </Typography>\n                        <Slider max={360} min={0} value={imageRotation} color={'secondary'} onChange={handleChangeRation} aria-labelledby=\"continuous-slider\" />\n                        <Button className={' mt-4 '} onClick={handleGenerateImage} variant=\"outlined\" color=\"secondary\">\n                            Sinh ảnh\n                        </Button>\n                    </form>\n                </div>\n                <div className={'col-md-8 row mt-5 align-items-center justify-content-center'}>\n                    <div className={'col-md-6'} id={'image-after-render'} style={{position: 'relative', overflow: 'hidden'}}>\n                        {linkMainImage && <img onLoad={onImgLoad} alt={'anh-chinh'} className={'img-fluid img-main'} src={linkMainImage}/>}\n                        <div id={'drag-image'} style={{ width: '100%', height: '100%' , position: 'absolute' , top: 0 }}>\n                            {\n                                linkTradeImage ?\n                                <img\n                                    style={{\n                                        transform: \"scale(\"+imageScale+\") rotate(\" + imageRotation + \"deg)\"\n                                    }}\n                                    className={'img-fluid img-trademark'}\n                                    alt='Test Image'\n                                    src={linkTradeImage} /> :\n                                <div/>\n                            }\n                        </div>\n                    </div>\n                    <div className={'col-md-6'} id={'result'}>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}